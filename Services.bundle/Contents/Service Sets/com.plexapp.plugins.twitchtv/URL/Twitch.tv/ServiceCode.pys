STREAM_DATA = 'https://api.twitch.tv/kraken/streams/%s'
HLS_TOKEN_URL = 'http://api.twitch.tv/api/channels/%s/access_token'
HLS_PLAYLIST_URL = 'http://usher.twitch.tv/api/channel/hls/%s.m3u8?token=%s&sig=%s'

HTTP_HEADERS = {
	'Client-ID': 'gzux2tt85x9ppnnxyh7czkfiovtxtd7'
}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].split('#')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

	user_id = GetUserId(url)

	try:
		video = JSON.ObjectFromURL(STREAM_DATA % (user_id), cacheTime=0, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	if 'stream' not in video or video['stream'] is None:
		raise Ex.LiveMediaNotStarted

	display_name = video['stream']['channel']['display_name']
	game = video['stream']['channel']['game'] if 'game' in video['stream']['channel'] else '?'
	status = video['stream']['channel']['status'] if 'status' in video['stream']['channel'] else ''
	viewers = video['stream']['viewers']
	thumb = video['stream']['preview']['large']

	return VideoClipObject(
		title = '%s - %s' % (display_name, game),
		summary = '%s\n\n%d viewers' % (status, viewers),
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url, ext='m3u8')
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	user_id = GetUserId(url)

	try:
		token = JSON.ObjectFromURL(HLS_TOKEN_URL % (user_id), cacheTime=0, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	video_url = HLS_PLAYLIST_URL % (user_id, String.Quote(token['token']), String.Quote(token['sig']))
	Log(' --> Final video_url: %s' % (video_url))

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(video_url))

####################################################################################################
def GetUserId(url):

	return url.split('/')[-1]
