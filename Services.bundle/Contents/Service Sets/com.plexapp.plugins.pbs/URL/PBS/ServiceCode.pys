RE_VIDEO_ID = Regex('http://(?:video|www)\.pbs\.org/video/([\d]+)')
RE_VIDEO_URL = Regex("recommended_encoding.*'url': '([^']+)'", Regex.DOTALL)

PLAYER_URL = 'http://player.pbs.org/portalplayer/%s/'

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromURL(url)

    title = html.xpath('//meta[@property="og:title"]/@content')[0].split(' | ')[-1]
    summary = html.xpath('//meta[@property="og:description"]/@content')[0]
    thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

    try:
        airdate = html.xpath('//span[contains(., "Aired:")]/text()')[0].split('Aired:')[-1].strip()
        airdate = Datetime.ParseDate(airdate).date()
    except:
        airdate = None

    try:
        duration = html.xpath('//span[contains(., "Video duration:")]/text()')[0].split('Video duration:')[-1].strip()
        duration = Datetime.MillisecondsFromString(duration)
    except:
        duration = None

    return VideoClipObject(
        title = title,
        summary = summary,
        originally_available_at = airdate,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution = 'sd',
            optimized_for_streaming = True,
            audio_channels = 2,
            parts = [
                PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    video_id = RE_VIDEO_ID.search(url).group(1)
    page = HTTP.Request(PLAYER_URL % (video_id)).content

    video_url = RE_VIDEO_URL.search(page).group(1)
    json_obj = JSON.ObjectFromURL('%s?format=json' % (video_url))

    if 'status' in json_obj and json_obj['status'] == 'ok':
        return IndirectResponse(VideoClipObject, key=json_obj['url'])
    else:
        raise Ex.MediaNotAvailable
