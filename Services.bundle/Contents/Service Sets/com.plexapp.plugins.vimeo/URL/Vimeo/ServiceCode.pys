API_URL = 'https://vimeo.com/api/v2/video/%s.json'
RE_VIMEO_ID = Regex('(\d{6,})')
RE_CONTROL_CHARS = Regex(u'[\u0000-\u001F]')

PLAYER_URL = 'https://player.vimeo.com/video/%s'
RE_JSON = Regex('var t=(\{.+?\});')
RE_CONFIG = Regex('window.vimeo.clip_page_config = (\{.+?\});')
RE_BANDWIDTH = Regex('BANDWIDTH=(\d+).+?\n([^\n]+)')

HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.4.8 (KHTML, like Gecko) Version/10.0.3 Safari/602.4.8'
}

####################################################################################################
def NormalizeURL(url):

	vimeo_id = RE_VIMEO_ID.search(url)

	if vimeo_id:
		return 'https://vimeo.com/%s' % (vimeo_id.group(1))

####################################################################################################
def MetadataObjectForURL(url):

	json_obj = None

	try:
		json_obj = JSON.ObjectFromURL(API_URL % (url.split('/')[-1]), cacheTime=CACHE_1HOUR, headers=HTTP_HEADERS)[0]
	except Ex.HTTPError, e:
		if e.code == 403:
			raise Ex.MediaNotAuthorized
		elif e.code == 404:
			try:
				page = HTTP.Request(PLAYER_URL % (url.split('/')[-1])).content
				json = RE_JSON.search(page).group(1)
				json_obj = JSON.ObjectFromString(json)

				return VideoClipObject(
					title = json_obj['video']['title'],
					thumb = Resource.ContentsOfURLWithFallback(json_obj['video']['thumbs']['640'])
				)

			except:
				raise Ex.MediaNotAvailable
		else:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	if not json_obj:
		raise Ex.MediaNotAvailable

	title = json_obj['title']

	summary = RE_CONTROL_CHARS.sub('', json_obj['description'])
	summary = String.StripTags(summary)

	thumb = json_obj['thumbnail_large']
	originally_available_at = Datetime.ParseDate(json_obj['upload_date'])

	duration = None
	if isinstance(json_obj['duration'], int) and json_obj['duration'] > 0:
		duration = json_obj['duration'] * 1000

	tags = []
	if json_obj['tags']:
		tags = json_obj['tags'].split(', ')

	directors = [json_obj['user_name']]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		originally_available_at = originally_available_at.date(),
		year = originally_available_at.year,
		duration = duration,
		tags = tags,
		#directors = directors
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url, bitrate=bitrate))
				)
			],
			video_resolution = video_resolution,
			bitrate = bitrate,
			audio_channels = 2
		) for video_resolution, bitrate in [(1080, 6000), (720, 3000), (540, 1800), (360, 1000)]
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate=6000, **kwargs):

	if not url:
		raise Ex.MediaNotAvailable

	json_obj = None

	try:
		content = HTTP.Request(url, cacheTime=0, headers=HTTP_HEADERS).content
		config_data = RE_CONFIG.search(content).group(1)
		config_json = JSON.ObjectFromString(config_data)
		config_url = config_json['player']['config_url']
	except Ex.HTTPError, e:
		if e.code == 403:
			raise Ex.MediaNotAuthorized
		elif e.code == 404:
			try:
				page = HTTP.Request(PLAYER_URL % (url.split('/')[-1])).content
				json = RE_JSON.search(page).group(1)
				json_obj = JSON.ObjectFromString(json)
			except:
				raise Ex.MediaNotAvailable
		else:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	if not json_obj:

		try:
			json_obj = JSON.ObjectFromURL(config_url, cacheTime=0, headers=HTTP_HEADERS)
		except Ex.HTTPError, e:
			if e.code == 403:
				raise Ex.MediaNotAuthorized
			elif e.code == 404:
				raise Ex.MediaNotAvailable
			else:
				raise Ex.MediaNotAvailable
		except:
			raise Ex.MediaNotAvailable

	if 'files' in json_obj['request'] and 'hls' in json_obj['request']['files']:

		cdn = json_obj['request']['files']['hls']['default_cdn']

		m3u8_master_url = json_obj['request']['files']['hls']['cdns'][cdn]['url']
		m3u8_master = HTTP.Request(m3u8_master_url.replace('https://', 'http://'), cacheTime=0, headers=HTTP_HEADERS).content
		available = {}

		for match in RE_BANDWIDTH.findall(m3u8_master):

			bandwidth = int(match[0])/1000
			available[bandwidth] = match[1]

		closest = min((abs(bitrate - i), i) for i in available.keys())[1]

		if 'skyfire' in m3u8_master_url:

			if '/video/' in available[closest]:
				playlist = available[closest].split('/video/')[1]
			elif available[closest].startswith('../'):
				playlist = available[closest].split('../')[1]
			elif available[closest] == "playlist.m3u8":
				playlist = '%s/%s' % (m3u8_master_url.split('/video/')[-1].split('/master.m3u8')[0], available[closest])
			else:
				Log('Unknown playlist format...')

			video_url = '%s/video/%s' % (m3u8_master_url.split('/video/')[0], playlist)

		elif 'hls.vimeocdn.com' in m3u8_master_url:
			video_url = '%s/%s' % (m3u8_master_url.rsplit('/', 1)[0], available[closest])

		else:
			Log('Unknown CDN...')
			raise Ex.MediaNotAvailable

		return IndirectResponse(VideoClipObject, key=video_url.replace('f=dash', '').strip('?&'))
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
# Queue fix (PlayVideoIndirect was renamed to PlayVideo at some point)
PlayVideoIndirect = PlayVideo
