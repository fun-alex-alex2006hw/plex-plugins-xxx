# Variables for Vevo Music videos
VEVO_URL = 'http://www.vevo.com/watch/%s/%s/%s'
RE_VEVO_URL_PATH = Regex('http://www\.(?:mtv|vh1)\.com/videos?/([^/]+)/\d+/(.+?)\.jhtml')
RE_VEVO_ID = Regex("MTVN.VIDEO.isrc = '(.+?)';")
RE_VEVO = Regex("MTVN.VIDEO.isVevo = (true|false);")

MRSS_URL = 'http://www.%s/feeds/mrss?uri=%s&isEpisode=true'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

MGID_FORMAT = 'mgid:arc:%s:%s:%s'
RE_MANIFEST_FEED = Regex('var triforceManifestFeed = (.+?);\n', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

    if url.endswith('#id='):
        url = url.split('#id=')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    vevo_url = VevoURL(url)
    if vevo_url:
        return URLService.MetadataObjectForURL(vevo_url)
        
    data = GetRSS(url)
    title = data.xpath('//channel/title/text()', namespaces=NAMESPACES)[0]
    try: summary = data.xpath('//channel/description/text()', namespaces=NAMESPACES)[0]
    except: summary = ''
    try: thumb = data.xpath('//channel/image/link/text()', namespaces=NAMESPACES)[0]
    except: thumb = data.xpath('//channel/image/url/text()', namespaces=NAMESPACES)[0]
    show = data.xpath('//media:category[@label="Show Name"]/text()', namespaces=NAMESPACES)[0]
    try: season = int(data.xpath('//media:category[@scheme="urn:mtvn:seasonN"]/text()', namespaces=NAMESPACES)[0])
    except: season = 0
    try: episode = int(data.xpath('//media:category[@scheme="urn:mtvn:episodeN"]/text()', namespaces=NAMESPACES)[0])
    except: episode = 0
    try:
        air_date = data.xpath('//pubDate/text()')[0]
        originally_available_at = Datetime.ParseDate(air_date)
    except:
        originally_available_at = None

    # Get the total duration for all of the video parts
    duration = 0
    media_list = data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
    for segment in media_list:
        try: duration += int(float(segment.get('duration'))*1000)
        except: pass

    return EpisodeObject(
        show = show,
        season = season,
        index = episode,
        title = title,
        summary = summary,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = originally_available_at
    )


####################################################################################################
@deferred
def MediaObjectsForURL(url):

    # Get vevo url
    vevo_url = VevoURL(url)

    # this part is only for music videos
    if vevo_url:
        return URLService.MediaObjectsForURL(vevo_url)

    # For show videos
    else:
        mrss_data = GetRSS(url)
        media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
        available_hls_streams = []
        
        for media_url in media_urls:
            if media_url.startswith('//'):
                media_url = 'https:' + media_url
            # Get HLS Streams
            try:
                hls_data = XML.ElementFromURL(media_url.replace('{device}', 'iPad'), cacheTime=CACHE_1HOUR)
            except:
                raise Ex.MediaNotAvailable

            # Make sure their are values for the video part
            try:
                part_hls_url = hls_data.xpath('//rendition/src/text()')[0]
                part_duration = hls_data.xpath('//rendition/@duration')[0]
            except: continue

            # Create part for the video section
            part = {'duration' : part_duration, 'hls_url': part_hls_url}
            available_hls_streams.append(part)

        # If there are no HLS streams, return MediaNotAvailable error
        if len(available_hls_streams)<1:
            raise Ex.MediaNotAvailable

        media_objects = []
        # Build media objects for hls videos
        parts = []
        for part in available_hls_streams:
            parts.append(
                PartObject(
                    key = HTTPLiveStreamURL(part['hls_url']),
                    duration = int(part['duration'])*1000
                )
            )

        media_objects.append(
            MediaObject(
                parts = parts,
                protocol = 'hls',
                container = 'mpegts',
            )
        )

    return media_objects

##################################################################################################
# This is a function to check for Vevo video IDs and build the Vevo url
def VevoURL(url):

    try:
        content = HTTP.Request(url).content
        html = HTML.ElementFromString(content)
    except:
        raise Ex.MediaNotAvailable

    # First check to see if it is a Vevo video
    # (Even if it is not a Vevo video, it will provide an empty Vevo id field)
    try:
        vevo = RE_VEVO.search(content).group(1).lower()
    except:
        vevo = 'false'

    # If Vevo build a Vevo url
    if vevo == 'true':
        id = RE_VEVO_ID.search(content).group(1)
        local_url = html.xpath('//meta[@property="og:url"]/@content')[0]
        (artist, title) = RE_VEVO_URL_PATH.search(local_url).groups()
        vevo_url = VEVO_URL % (artist, title, id)
    else:
        vevo_url = None

    #Log(' the value of vevo_url is %s' %vevo_url)
    return vevo_url

####################################################################################################
# Get the videos id, build the mgid and produce the RSS xml page 
def GetRSS(url):

    try:
        content = HTTP.Request(url).content
        json = JSON.ObjectFromString(RE_MANIFEST_FEED.search(content).group(1))
    except:
        raise Ex.MediaNotAvailable

    if '/video-playlists/' in url:
        video_id = json['manifest']['reporting']['parentId']
    else:
        video_id = json['manifest']['reporting']['itemId']
    # The page type is either ENT_P006 - full episode player or ENT_P008 - video clip player
    page_type = json['manifest']['type']
    # get the host url
    host = url.split('//www.')[1].split('/')[0]
    if 'ENT_P006' in page_type:
        mgid = MGID_FORMAT %(host, 'episode', video_id)
    else:
        mgid = MGID_FORMAT %(host, 'video', video_id)

    # Find the host and build the mgid
    if mgid:
        try: xml = XML.ElementFromURL(MRSS_URL % (host, mgid))
        except: raise Ex.MediaNotAvailable
    else:
        Log('there is not mgid')
        raise Ex.MediaNotAvailable

    # Make sure there are videos available
    if len(xml.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)) < 1:
        Log('there is no media in this feed')
        raise Ex.MediaNotAvailable
    else:
        return xml
