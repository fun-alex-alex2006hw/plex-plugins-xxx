from tv4play import Login

RE_VIDEO_ID     = Regex('(?<=video_id=)[0-9]+')
RE_SHOW_EPISODE = Regex('(.*) *(Del) *([0-9]+) *(.*)', Regex.IGNORECASE)

API_METADATA_URL  = 'http://webapi.tv4play.se/play/video_assets/%s'
API_VIDEO_URL = 'http://prima.tv4play.se/%s'

PROXY_URL     = 'http://papi.tv4play.se/playback/hls/hlsproxy.m3u8?hlsurl=%s&subsurl=%s'

USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17"

####################################################################################################
def MetadataObjectForURL(url):
    # Determine id of episode
    try:
        id = RE_VIDEO_ID.search(url).group(0)
    except:
        raise Ex.MediaNotAvailable

    try:
        json_data = JSON.ObjectFromURL(API_METADATA_URL % str(id))
    except:
        raise Ex.MediaNotAvailable

    try:
        if json_data['is_drm_protected']:
            raise Ex.MediaNotAvailable
    except:
        pass

    title = json_data['title'] if 'title' in json_data else None
    
    show = None
    art = None
    if 'program' in json_data:
        show = json_data['program']['name'] if 'name' in json_data['program'] else None
        art = json_data['program']['program_image'] if 'program_image' in json_data['program'] else None

    episode = int(json_data['episode']) if 'episode' in json_data else None
    season = int(json_data['season']) if 'season' in json_data else None
    summary = json_data['description'] if 'description' in json_data else None
    thumb = json_data['image'] if 'image' in json_data else None
    air_date = Datetime.ParseDate(json_data['broadcast_date_time'].split('T')[0]).date() if 'broadcast_date_time' in json_data else None
    duration = int(json_data['duration']) * 1000 if 'duration' in json_data else None

    if show:  
        return EpisodeObject(
            show = show,
            title = title,
            index = episode,
            season = season,
            summary = summary,
            duration = duration,
            thumb = thumb,
            art = art,
            originally_available_at = air_date
        )
    else:
        return VideoClipObject(
            title = title,
            summary = summary,
            duration = duration,
            thumb = thumb,
            art = art,
            originally_available_at = air_date
        )

####################################################################################################
def MediaObjectsForURL(url):
    # Determine id of episode
    try:
        id = RE_VIDEO_ID.search(url).group(0)
    except:
        raise Ex.MediaNotAvailable
    
    # Fix for Plex Web clients(avoid M3U8 cross domain access denied)
    if Client.Product in ['Plex Web'] and Client.Platform not in ['Safari']:
        cb = PlayDirect
    else:
        cb = PlayIndirect
        
    return [
        MediaObject(
            video_resolution        = 576, 
            audio_channels          = 2,
            optimized_for_streaming = True,
            parts                   = [
                PartObject(
                    key = HTTPLiveStreamURL(Callback(cb, id = id))
                )
            ]
        )
    ]

####################################################################################################
def PlayDirect(id, **kwargs):
    hls_url, subs_url = GetURLs(id)
    
    if hls_url and subs_url:
        return HTTP.Request(PROXY_URL % (hls_url, subs_url)).content
    else:
        # No subs were found(probably a live stream)
        return HTTP.Request(hls_url).content
   
####################################################################################################
@indirect
def PlayIndirect(id, **kwargs):
    hls_url, subs_url = GetURLs(id)
    
    if hls_url and subs_url:
        return IndirectResponse(
            VideoClipObject,
            key = HTTPLiveStreamURL(url = PROXY_URL % (hls_url, subs_url))
        )
    else:
        # No subs were found(probably a live stream)
        return IndirectResponse(
            VideoClipObject,
            key = HTTPLiveStreamURL(url = hls_url)
        ) 
        
####################################################################################################
def GetURLs(id):
    xmlElement = None
        
    headers = {}
    headers['User-Agent'] = USER_AGENT
    
    is_live = IsLive(id)
    
    if not is_live:
        try:
            xmlElement = XML.ElementFromURL(
                url = API_VIDEO_URL % ('/api/web/asset/' + str(id) + '/play'),
                headers = headers
            )
        except:
            pass
    else:
        try:
            xmlElement = XML.ElementFromURL(
                url = API_VIDEO_URL % ('/api/html5/asset/' + str(id) + '/play?videoFormat=livehls'),
                headers = headers
            ) 
        except: 
            pass   

    if xmlElement:
        hls_url  = None
        subs_url = None

        for item in xmlElement.xpath("//playback//items//item"):
            url         = item.xpath(".//url/text()")[0]
            mediaFormat = item.xpath(".//mediaFormat/text()")[0]
            
            if url.startswith('http') and (('.m3u8' in url) or ('.f4m' in url)):
                if '.f4m' in url:
                    url = url.replace('tv4playhds-f.akamaihd.net/z/', 'tv4play-i.akamaihd.net/i/').replace('manifest.f4m', 'master.m3u8')
                
                if mediaFormat == 'mp4' or mediaFormat == 'livehls':
                    hls_url = GetClientDependentURL(url)
                    
                elif mediaFormat == 'webvtts':
                    subs_url = url
            
            if hls_url and subs_url:
                return hls_url, subs_url
        
        if hls_url:
            return hls_url, None
    
        if is_live and xmlElement.xpath("//playback//playbackStatus/text()")[0] == 'NOT_STARTED':
            raise Ex.LiveMediaNotStarted

    raise Ex.MediaNotAvailable

###########################################################
def GetClientDependentURL(url):
    if Client.Platform in ['MacOSX', 'Windows', None]:
        streams = GetHLSStreams(url)
    
        # Return highest bitrate url since PMC can't handle HLS correctly
        # Also consider a client not identifying itself as needing help,
        # the Samsung client is one of those.
        maxBitrateURL = streams[0]['url']
        
        if not '?' in maxBitrateURL:
            # Samsung requires an arbitrary parameter in the stream url since
            # '&' is always appended by that client ...
            maxBitrateURL = maxBitrateURL + '?a=1'
        
        return maxBitrateURL
    else:
        # Other clients can handle HLS correctly
        return url 

###########################################################
def GetHLSStreams(url):
    streams = []

    playList = HTTP.Request(url).content

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))        

            if "RESOLUTION" in line:
                stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
            else:
                stream["resolution"] = 0

        elif ".m3u8" in line:
            path = ''
            
            if not line.startswith("http"):
                path = url[ : url.rfind('/') + 1]
                
            stream["url"] = path + line
                    
            streams.append(stream)
                
    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)        

    return sorted_streams

###########################################################
def IsLive(id):
    try:
        data = JSON.ObjectFromURL('http://webapi.tv4play.se/play/video_assets?id=%s' % id)
        return data['results'][0]['is_live']
    except:
        return False  
