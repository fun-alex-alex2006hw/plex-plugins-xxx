import ssl, urllib2

HTTP_HEADERS = {
	'User-Agent': 'ABC/5.0.14(iPad4,4; cpu iOS 10_2_1 like mac os x; en_nl) CFNetwork/758.5.3 Darwin/15.6.0',
	'appversion': '5.0.14'
}

METADATA_URL = 'https://api.pluto.watchabc.go.com/api/ws/pluto/v1/module/videoplayer/1350290?brand=001&device=002&video=%s'
ENTITLEMENT_URL = 'http://api.entitlement.watchabc.go.com/vp2/ws-secure/entitlement/2020/authorize.json'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	video_id = GetVideoId(url)
	json_obj = JSON.ObjectFromString(GetData(METADATA_URL % (video_id)))

	if not 'video' in json_obj:
		raise Ex.MediaNotAvailable

	return EpisodeObject(
		show = json_obj['video']['show']['title'],
		title = json_obj['video']['title'],
		summary = json_obj['video']['longdescription'],
		duration = json_obj['video']['duration'],
		content_rating = json_obj['video']['tvrating'],
		originally_available_at = Datetime.ParseDate(json_obj['video']['airtime']).date(),
		season = int(json_obj['video']['seasonnumber']),
		index = int(json_obj['video']['episodenumber']),
		art = json_obj['images'][0]['value'],
		thumb = json_obj['images'][0]['value']
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_resolution = 720,
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	video_id = GetVideoId(url)
	json_obj = JSON.ObjectFromString(GetData(METADATA_URL % (video_id)))

	if not 'video' in json_obj:
		raise Ex.MediaNotAvailable

	m3u8_base_url = json_obj['video']['assets'][0]['value']

	post_values = {
		'video_id': video_id,
		'mvpd': 'None',
		'token_type': 'ap',
		'uplynk_ct': 'a',
		'video_type': 'lf',
		'brand': '001',
		'device': '002'
	}

	json_obj = JSON.ObjectFromURL(ENTITLEMENT_URL, values=post_values, headers=HTTP_HEADERS)

	if not 'uplynkData' in json_obj:

		if 'errors' in json_obj and 'errors' in json_obj['errors']:
			Log(" *** The following error(s) occured:")

			for error in json_obj['errors']['errors']:
				Log(" *** %s" % (error['message']))

			Log(" *** If any of the above errors is about geoblocking, DO NOT report this as a bug, we can't fix this for you!")

		raise Ex.MediaNotAvailable

	session_key = json_obj['uplynkData']['sessionKey']

	video_url = '%s?%s' % (m3u8_base_url, session_key)

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))

####################################################################################################
def GetVideoId(url):

	if url.startswith('abc://'):
		return url.split('abc://')[-1]
	else:

		try:
			html = HTML.ElementFromURL(url)
		except:
			raise Ex.MediaNotAvailable

		video_id = html.xpath('//div[@data-video-id]/@data-video-id')

		if len(video_id) < 1:
			raise Ex.MediaNotAvailable
		else:
			return video_id[0]

####################################################################################################
def GetData(url):

	# Quick and dirty workaround to get this to work on Windows
	# Do not validate ssl certificate
	# http://stackoverflow.com/questions/27835619/ssl-certificate-verify-failed-error
	if 'Windows' in Platform.OS:
		req = urllib2.Request(url, headers=HTTP_HEADERS)
		ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
		data = urllib2.urlopen(req, context=ssl_context).read()
	else:
		data = HTTP.Request(url, headers=HTTP_HEADERS).content

	return data
