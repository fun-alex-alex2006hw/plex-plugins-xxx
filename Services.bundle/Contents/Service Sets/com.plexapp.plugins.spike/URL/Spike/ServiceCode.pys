MRSS_URL = 'http://www.spike.com/feeds/mrss?uri=%s&isEpisode=true'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

MGID_FORMAT = 'mgid:arc:spike.com:%s:%s'
RE_MANIFEST_FEED = Regex('var triforceManifestFeed = (.+?);', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):

    if url.endswith('#id='):
        url = url.split('#id=')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    data = GetRSS(url)
    title = data.xpath('//channel/title/text()', namespaces=NAMESPACES)[0]
    summary = data.xpath('//channel/description/text()', namespaces=NAMESPACES)[0]
    thumb = data.xpath('//channel/image/link/text()', namespaces=NAMESPACES)[0]
    show = data.xpath('//media:category[@label="Show Name"]/text()', namespaces=NAMESPACES)[0]
    try: season = int(data.xpath('//media:category[@scheme="urn:mtvn:seasonN"]/text()', namespaces=NAMESPACES)[0])
    except: season = 0
    try: episode = int(data.xpath('//media:category[@scheme="urn:mtvn:episodeN"]/text()', namespaces=NAMESPACES)[0])
    except: episode = 0
    try:
        air_date = data.xpath('//pubDate/text()')[0]
        originally_available_at = Datetime.ParseDate(air_date)
    except:
        originally_available_at = None

    # Get the total duration for all of the video parts
    duration = 0
    media_list = data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
    for segment in media_list:
        try: duration += int(float(segment.get('duration'))*1000)
        except: pass

    return EpisodeObject(
        show = show,
        season = season,
        index = episode,
        title = title,
        summary = summary,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb),
        originally_available_at = originally_available_at
    )


####################################################################################################
@deferred
def MediaObjectsForURL(url):

    mrss_data = GetRSS(url)
    media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
    available_hls_streams = []

    for media_url in media_urls:
        if media_url.startswith('//'):
            media_url = 'https:' + media_url
        # Get HLS Streams
        try:
            hls_data = XML.ElementFromURL(media_url.replace('{device}', 'iPad'), cacheTime=CACHE_1HOUR)
        except:
            raise Ex.MediaNotAvailable

        # Make sure their are values for the video part
        try:
            part_hls_url = hls_data.xpath('//rendition/src/text()')[0]
            part_duration = hls_data.xpath('//rendition/@duration')[0]
        except: continue

        # Create part for the video section
        part = {'duration' : part_duration, 'hls_url': part_hls_url}
        available_hls_streams.append(part)

    # If there are no HLS streams, return MediaNotAvailable error
    if len(available_hls_streams)<1:
        raise Ex.MediaNotAvailable

    media_objects = []
    # Build media objects for hls videos
    parts = []
    for part in available_hls_streams:
        parts.append(
            PartObject(
                key = HTTPLiveStreamURL(part['hls_url']),
                duration = int(part['duration'])*1000
            )
        )

    media_objects.append(
        MediaObject(
            parts = parts,
            protocol = 'hls',
            container = 'mpegts',
        )
    )

    return media_objects

####################################################################################################
# Get the videos id, build the mgid and produce the RSS xml page 
def GetRSS(url):

    try:
        content = HTTP.Request(url).content
        json = JSON.ObjectFromString(RE_MANIFEST_FEED.search(content).group(1))
    except:
        raise Ex.MediaNotAvailable

    video_id = json['manifest']['reporting']['itemId']
    # The page type is either ENT_P006 - full episode player or ENT_P008 - video clip player
    page_type = json['manifest']['type']
    if 'ENT_P006' in page_type:
        mgid = MGID_FORMAT %('episode', video_id)
    else:
        mgid = MGID_FORMAT %('video', video_id)

    # Find the host and build the mgid
    if mgid:
        try: xml = XML.ElementFromURL(MRSS_URL % mgid)
        except: raise Ex.MediaNotAvailable
    else:
        Log('there is not mgid')
        raise Ex.MediaNotAvailable

    # Make sure there are videos available
    if len(xml.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)) < 1:
        Log('there is no media in this feed')
        raise Ex.MediaNotAvailable
    else:
        return xml
