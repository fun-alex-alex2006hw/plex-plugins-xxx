SHOWS_URL = 'http://tveatc-usa.nbcuni.com/awe3/live/5/nbce/containers/iPadRetina'
VIDEOS_URL = 'http://tveatc-usa.nbcuni.com/awe3/live/5/nbce/containers/iPadRetina/%s'

RE_VIDEO_ID = Regex('nbc\.com/((?!Vintage_Shows).+/)?video/.+?/(?P<id>\d{7})')
RE_CLEANUP_TITLE = Regex('[^a-z0-9]+')

####################################################################################################
def NormalizeURL(url):

	if '#' in url and '|' in url and not '?' in url:
		return url

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	video_id = video_id.group('id')
	show = None
	season = None
	index = None

	(episodes_url, video_id) = GetEpisodeData(url, video_id)
	found_episode = False

	for episode in JSON.ObjectFromURL(episodes_url)['results']:

		if episode['assetID'].endswith(video_id):

			show = episode['parentContainerTitle']
			season = episode['seasonNumber'] if 'seasonNumber' in episode else None
			index = episode['episodeNumber'] if 'episodeNumber' in episode else None
			title = episode['title']
			summary = episode['description']
			duration = episode['totalDuration']
			originally_available_at = Datetime.FromTimestamp(episode['firstAiredDate']).date()

			try:
				thumb = episode['images'][0]['images']['video_thumbnail_16_by_9']
			except:
				thumb = ''

			found_episode = True
			break

	if not found_episode:
		raise Ex.MediaNotAvailable

	if show and season and index:

		return EpisodeObject(
			show = show,
			season = int(season),
			index = int(index),
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '720',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	video_id = RE_VIDEO_ID.search(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	video_id = video_id.group('id')

	(episodes_url, video_id) = GetEpisodeData(url, video_id)
	found_episode = False

	try:
		json_obj = JSON.ObjectFromURL(episodes_url)['results']
	except:
		raise Ex.MediaNotAvailable

	for episode in json_obj:

		if episode['assetID'].endswith(video_id):

			m3u8_url = episode['videoURL']
			found_episode = True
			break

	if not found_episode:
		raise Ex.MediaNotAvailable

	try:
		m3u8 = HTTP.Request(m3u8_url, cacheTime=10, follow_redirects=False).content
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			m3u8_url = e.headers['Location']
	except Ex.HTTPError, e:
		if e.code == 403:
			raise Ex.MediaGeoblocked
		elif e.code == 404:
			raise Ex.MediaNotAvailable
		else:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject,
		key = HTTPLiveStreamURL(m3u8_url)
	)

####################################################################################################
def GetEpisodeData(url, video_id):

	# URL Service requests coming from the NBC channel already have some of the required information
	# added to the end of the URL, after the anchor.

	if '#' in url:

		(show_id, video_id) = url.split('#')[-1].split('|')

		try:
			test = HTTP.Request(VIDEOS_URL % show_id).content
			return (VIDEOS_URL % (show_id), video_id)
		except:
			return GetEpisodeData(url.split('#')[0], video_id)

	else:

		# Get the show name
		try:
			html = HTML.ElementFromURL(url)
		except:
			raise Ex.MediaNotAvailable

		try:
			show_name = html.xpath('//meta[@property="og:url"]/@content')[0].split('/')[3]
			show_name = RE_CLEANUP_TITLE.sub('', show_name)
		except:
			raise Ex.MediaNotAvailable

		for show in JSON.ObjectFromURL(SHOWS_URL)['results']:

			show_title = RE_CLEANUP_TITLE.sub('', show['title'].lower())
			show_asset_id = RE_CLEANUP_TITLE.sub('', show['assetID'].lower())

			if show_title == show_name or show_asset_id == show_name:
				show_id = show['assetID']
				return (VIDEOS_URL % (show_id), video_id)

	raise Ex.MediaNotAvailable
