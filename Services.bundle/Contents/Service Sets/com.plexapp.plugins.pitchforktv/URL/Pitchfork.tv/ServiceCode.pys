####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)
	yt_iframe = html.xpath('//iframe[contains(@src, "youtube.com/embed/")]/@src')

	if len(yt_iframe) < 1:
		raise Ex.MediaNotAvailable

	return URLService.MetadataObjectForURL(yt_iframe[0])

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = resolution,
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, res=resolution))
			]
		) for resolution in (1080, 720, 480)
	]

####################################################################################################
@indirect
def PlayVideo(url, res=1080, **kwargs):

	html = HTML.ElementFromURL(url)
	yt_iframe = html.xpath('//iframe[contains(@src, "youtube.com/embed/")]/@src')

	if len(yt_iframe) < 1:
		raise Ex.MediaNotAvailable

	media = URLService.MediaObjectsForURL(yt_iframe[0])

	resolutions = [1080, 720, 480]
	index = resolutions.index(res)

	for resolution_index in range(index, len(resolutions)):
		current_resolution = resolutions[resolution_index]

		for video in media:
			if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
				continue

			if video.video_resolution == current_resolution:
				return Redirect(video.parts[0].key)

	return Redirect(media[-1].parts[0].key)
