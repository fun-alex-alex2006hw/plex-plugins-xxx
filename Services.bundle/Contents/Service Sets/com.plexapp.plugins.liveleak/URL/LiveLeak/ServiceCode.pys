RE_FILE_URL = Regex('file: "([^"]+)"')
RE_ITEM_TOKEN = Regex('item_token=([^&"]+)')
RE_CONTROL_CHARS = Regex(u'[\u0000-\u001F]')

####################################################################################################
def NormalizeURL(url):

    if 'll_embed' in url:
        embed_html = HTTP.Request(url).content
        item_token = RE_ITEM_TOKEN.search(embed_html)

        if item_token:
            url = 'http://www.liveleak.com/view?i=%s' % item_token.group(1)

    return url

####################################################################################################
def MetadataObjectForURL(url):

    data = HTTP.Request(url).content
    data = RE_CONTROL_CHARS.sub('', data)
    html = HTML.ElementFromString(data)

    # Check script tag for video and iframes for YouTube embeds
    script = html.xpath('//script[contains(text(), "file:")]/text()')
    youtube = html.xpath('//iframe[contains(@src, "youtube.com/embed")]/@src')
    video = html.xpath('//video/@src')
    source = html.xpath('//video/source/@src')

    if len(youtube) > 0:
        link = youtube[0]
        if not link.startswith("http"):
            link = 'http' + link
        return URLService.MetadataObjectForURL(link)
    elif len(script) > 0 and RE_FILE_URL.search(script[0]):
        pass
    elif len(video) > 0 or len(source) > 0:
        pass
    else:
        raise Ex.MediaNotAvailable

    title = html.xpath("//meta[@property='og:title']/@content")[0].split(' - ', 1)[-1]
    description = html.xpath("//meta[@property='og:description']/@content")[0]
    thumb = html.xpath("//head/meta[@property='og:image']/@content")[0]

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = 'sd',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page_content = HTTP.Request(url).content

    # Find the video url from inside the player's config
    video_url = RE_FILE_URL.search(page_content)

    if video_url:
        video_url = String.Unquote(video_url.group(1))
    else:

        html = HTML.ElementFromString(page_content)
        video = html.xpath('//video/@src')

        if len(video) > 0:
            video_url = video[0]
        else:
            source = html.xpath('//video/source/@src')

            if len(source) > 0:
                video_url = source[0]
            else:
                raise Ex.MediaNotAvailable

    return IndirectResponse(VideoClipObject, key=video_url)
